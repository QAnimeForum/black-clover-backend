import { Inject, UseFilters } from '@nestjs/common';
import { WINSTON_MODULE_PROVIDER } from 'nest-winston';
import {
    Command,
    Ctx,
    Message,
    On,
    SceneEnter,
    Wizard,
    WizardStep,
} from 'nestjs-telegraf';
import { ENUM_SCENES_ID } from 'src/modules/tg-bot/constants/scenes.id.enum';
import { TelegrafExceptionFilter } from 'src/modules/tg-bot/filters/tg-bot.filter';
import { BotContext } from 'src/modules/tg-bot/interfaces/bot.context';
import { LOGGER_INFO } from 'src/modules/tg-bot/utils/logger';
import { ENUM_USER_PERMISSION_TYPE } from 'src/modules/user/entities/user.entity';
import { UserService } from 'src/modules/user/services/user.service';
import { Logger } from 'winston';

@Wizard(ENUM_SCENES_ID.DELETE_ADMIN_SCENE_ID)
@UseFilters(TelegrafExceptionFilter)
export class DeleteAdminWizard {
    constructor(
        private readonly userService: UserService,
        @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger
    ) {}

    @SceneEnter()
    async start(@Ctx() ctx: BotContext) {
        await ctx.reply(
            `üßü –í–≤–µ–¥–∏ TRADE ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Å –ø–æ—Å—Ç–∞ –∞–¥–º–∏–Ω–∞.\n–ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç, —Ç–æ –µ–º—É –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å /start –≤ –±–æ—Ç–µ!`
        );
    }

    @Command('cancel')
    @WizardStep(1)
    async cancel(@Ctx() ctx: BotContext) {
        await ctx.scene.enter(ENUM_SCENES_ID.ADMIN_SCENE_ID);
    }
    @On('text')
    @WizardStep(1)
    async getTgId(@Ctx() ctx: BotContext, @Message() message) {
        console.log(message);
        const isUserExists = await this.userService.exists(message.text);
        if (!isUserExists) {
            ctx.reply(
                '–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∏—Ç—å /cancel'
            );
            ctx.wizard.back();
        }
        await this.userService.changeUserRole(
            message.text,
            ENUM_USER_PERMISSION_TYPE.OPRDINARY
        );
        this.logger.log(
            LOGGER_INFO,
            `üü¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id: ${message.text}} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.`
        );
        await ctx.scene.enter(ENUM_SCENES_ID.ADMIN_SCENE_ID);
    }
}
