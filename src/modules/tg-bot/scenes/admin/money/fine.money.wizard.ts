import { InjectBot, TELEGRAF_STAGE } from 'nestjs-telegraf';

import { Inject, Injectable, Logger } from '@nestjs/common';
import { Composer, Markup, Scenes, Telegraf } from 'telegraf';

import { WINSTON_MODULE_PROVIDER } from 'nest-winston';
import { message } from 'telegraf/filters';
import { UserService } from 'src/modules/user/services/user.service';
import { WalletService } from 'src/modules/money/wallet.service';
import { ENUM_SCENES_ID } from 'src/modules/tg-bot/constants/scenes.id.enum';
import { BotContext } from 'src/modules/tg-bot/interfaces/bot.context';
import { TgBotService } from 'src/modules/tg-bot/services/tg-bot.service';
@Injectable()
export class FineMoneyWizard {
    readonly scene: Scenes.WizardScene<BotContext>;
    readonly steps: Composer<BotContext>[] = [];
    constructor(
        @InjectBot() bot: Telegraf<BotContext>,
        @Inject(TELEGRAF_STAGE)
        private readonly stage: Scenes.Stage<BotContext>,
        private readonly walletService: WalletService,
        private readonly userService: UserService,
        private readonly tgBotService: TgBotService,
        @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger
    ) {
        this.scene = new Scenes.WizardScene<BotContext>(
            ENUM_SCENES_ID.FINE_MONEY_SCENE_ID,
            this.step1(),
            this.step2(),
            this.step3()
        );

        this.scene.enter(this.start());
        this.stage.register(this.scene);
        bot.use(stage.middleware());
        bot.catch((err: Error, ctx) => {
            console.log(err);
            this.tgBotService.catchException(err, ctx, this.logger);
        });
    }

    start() {
        return async (ctx: BotContext) => {
            ctx.scene.session.moneyInfo = {
                adminId: 0,
                tgId: 0,
                copper: 0,
                silver: 0,
                electrum: 0,
                gold: 0,
                platinum: 0,
            };
            await ctx.reply(
                `üßü –í–≤–µ–¥–∏  ID –∏–≥—Ä–æ–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏.\n –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç, —Ç–æ –µ–º—É –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å /start –≤ –±–æ—Ç–µ!\n –î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤–≤–µ–¥–∏—Ç–µ /cancel`,
                {
                    parse_mode: 'HTML',
                    ...Markup.removeKeyboard(),
                }
            );
        };
    }
    step1() {
        const composer = new Composer<BotContext>();
        composer.start((ctx) => ctx.scene.enter(ENUM_SCENES_ID.START_SCENE_ID));
        composer.command('cancel', async (ctx) => {
            await ctx.reply(`–°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –æ—Ç–º–µ–Ω–µ–Ω–æ.`);
            ctx.scene.enter(ENUM_SCENES_ID.ADMIN_MONEY_SCENE_ID);
        });
        composer.on(message('text'), async (ctx) => {
            const tgId = ctx.update.message.text;
            const isUserExists = await this.userService.exists(tgId);
            if (!isUserExists) {
                ctx.reply(
                    '–í–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∏—Ç—å /cancel'
                );
                ctx.wizard.back();
            } else {
                ctx.scene.session.moneyInfo.adminId =
                    ctx.update.message.from.id;
                ctx.scene.session.moneyInfo.tgId = Number.parseInt(
                    ctx.update.message.text
                );
                await ctx.reply(
                    `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω–∞—Ö–æ–¥–∏—Ç–µ —Å–Ω—è—Ç—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–Ω—ã—Ö} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç—ã—Ö} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä—É–º–æ–≤—ã—Ö} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö}`
                );
                ctx.wizard.next();
            }
        });
        return composer;
    }

    step2() {
        const composer = new Composer<BotContext>();
        composer.start((ctx) => ctx.scene.enter(ENUM_SCENES_ID.START_SCENE_ID));
        composer.command('cancel', async (ctx) => {
            await ctx.reply(`–°–Ω—è—Ç–∏–µ –¥–µ–Ω–µ–≥ –æ—Ç–º–µ–Ω–µ–Ω–æ.`);
            ctx.scene.enter(ENUM_SCENES_ID.ADMIN_MONEY_SCENE_ID);
        });
        composer.on(message('text'), async (ctx) => {
            const array = ctx.update.message.text.split(' ');
            if (array.length !== 5) {
                ctx.reply(
                    '–í–≤–µ–¥–µ–Ω–æ –Ω–µ 5 —á–∏—Å–µ–ª. \n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é –≤–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel.'
                );
                ctx.wizard.back();
                return;
            }
            const isAllItemsInteger = array.every((item) =>
                Number.isInteger(item)
            );
            if (isAllItemsInteger) {
                ctx.reply(
                    '–ù–µ –≤—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —è–≤–ª—è—é—Ç—Å—è —Ü–∏—Ñ—Ä—ã.\n–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –º–µ–Ω—é –≤–≤–æ–¥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel.'
                );
                ctx.wizard.back();
                return;
            }
            const copperText = ` –ú–µ–¥–Ω—ã–µ: ${array[0]}\n`;
            const silverText = `–°–µ—Ä–µ–±—Ä—è–Ω—ã–µ: ${array[1]}\n`;
            const electrumText = `–≠–ª–µ–∫—Ç—Ä—É–º–æ–≤—ã–µ: ${array[2]}\n`;
            const goldText = `–ó–æ–ª–æ—Ç—ã–µ: ${array[3]}\n`;
            const platinumText = `–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–µ: ${array[4]}\n`;
            ctx.scene.session.moneyInfo.copper = Number.parseInt(array[0]);
            ctx.scene.session.moneyInfo.silver = Number.parseInt(array[1]);
            ctx.scene.session.moneyInfo.electrum = Number.parseInt(array[2]);
            ctx.scene.session.moneyInfo.gold = Number.parseInt(array[3]);
            ctx.scene.session.moneyInfo.platinum = Number.parseInt(array[4]);
            const caption =
                `–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–∞–∫—É—é —Å—É–º–º—É:\n` +
                copperText +
                silverText +
                electrumText +
                goldText +
                platinumText +
                '–ø–æ id: ' +
                ctx.scene.session.moneyInfo.tgId;
            ctx.reply(caption, {
                ...Markup.inlineKeyboard([
                    [Markup.button.callback('–î–∞', 'yes')],
                    [Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', 'CHANGE_MONEY')],
                    [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', 'CANCEL')],
                ]),
            });
            ctx.wizard.next();
        });
        return composer;
    }

    step3() {
        const composer = new Composer<BotContext>();
        composer.start((ctx) => ctx.scene.enter(ENUM_SCENES_ID.START_SCENE_ID));
        composer.command('cancel', async (ctx) => {
            await ctx.reply('–ü–µ—Ä–≤–æ–¥ –¥–µ–Ω–µ–≥ –æ—Ç–º–µ–Ω—ë–Ω.');
            ctx.scene.enter(ENUM_SCENES_ID.ADMIN_MONEY_SCENE_ID);
        });
        composer.action('yes', async (ctx) => {
            await ctx.answerCbQuery();
            const copperText = ` –ú–µ–¥–Ω—ã–µ: ${ctx.scene.session.moneyInfo.copper}\n`;
            const silverText = `–°–µ—Ä–µ–±—Ä—è–Ω—ã–µ: ${ctx.scene.session.moneyInfo.copper}\n`;
            const electrumText = `–≠–ª–µ–∫—Ç—Ä—É–º–æ–≤—ã–µ: ${ctx.scene.session.moneyInfo.copper} \n`;
            const goldText = `–ó–æ–ª–æ—Ç—ã–µ: ${ctx.scene.session.moneyInfo.copper}\n`;
            const platinumText = `–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–µ: ${ctx.scene.session.moneyInfo.copper}\n`;
            const tg = ctx.scene.session.moneyInfo.tgId;
            await this.walletService.fine(ctx.scene.session.moneyInfo);
            const caption =
                '–í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ ' +
                tg +
                ' —Ç–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥:\n' +
                copperText +
                silverText +
                electrumText +
                goldText +
                platinumText;
            await ctx.reply(caption);
            await ctx.telegram.sendMessage(
                tg,
                `–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–µ–Ω—å–≥–∏: ` +
                    copperText +
                    silverText +
                    electrumText +
                    goldText +
                    platinumText
            );
            ctx.scene.enter(ENUM_SCENES_ID.ADMIN_MONEY_SCENE_ID);
        });

        composer.action('CHANGE_MONEY', async (ctx) => {
            await ctx.reply(
                `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞—á–∏—Å–ª–∏—Ç—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–Ω—ã—Ö} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç—ã—Ö} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä—É–º–æ–≤—ã—Ö} {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö}`
            );
            ctx.wizard.back();
            ctx.wizard.selectStep(1);
        });
        composer.action('CANCEL', async (ctx) => {
            await ctx.reply('–ü–µ—Ä–≤–æ–¥ –¥–µ–Ω–µ–≥ –æ—Ç–º–µ–Ω—ë–Ω.');
            ctx.scene.enter(ENUM_SCENES_ID.ADMIN_MONEY_SCENE_ID);
        });
        return composer;
    }
}
