import {
    Hears,
    Scene,
    SceneEnter,
    Sender,
    Context,
    Action,
} from 'nestjs-telegraf';
import { EXCHANGE_RATES_PATH, MONEY_IMAGE_PATH } from '../../constants/images';
import { TelegrafExceptionFilter } from '../../filters/tg-bot.filter';
import { BotContext } from '../../interfaces/bot.context';
import { Inject, UseFilters } from '@nestjs/common';
import { Markup } from 'telegraf';
import { WINSTON_MODULE_PROVIDER } from 'nest-winston';
import { Logger } from 'winston';
import { ENUM_SCENES_ID } from '../../constants/scenes.id.enum';
import {
    BACK_BUTTON,
    EXCHANGE_RATES_BUTTON,
    TRANSFER_MONEY_BUTTON,
    WALLET_BUTTON,
} from '../../constants/button-names.constant';
import { WalletService } from 'src/modules/money/wallet.service';
import { walletToText } from '../../utils/profile.utils';
import { ENUM_ACTION_NAMES } from '../../constants/action-names.constant';

@Scene(ENUM_SCENES_ID.WALLET_SCENE_ID)
@UseFilters(TelegrafExceptionFilter)
export class WalletScene {
    constructor(
        private readonly walletService: WalletService,
        @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger
    ) {}
    async showWalletInformation(ctx: BotContext, tgId: any) {
        const wallet = await this.walletService.findWalletByUserTgId(tgId);
        const caption = walletToText(wallet);
        if (ctx.chat.type == 'private') {
            await ctx.sendPhoto(
                {
                    source: MONEY_IMAGE_PATH,
                },
                {
                    caption,
                    ...Markup.keyboard([
                        [EXCHANGE_RATES_BUTTON, TRANSFER_MONEY_BUTTON],
                        [WALLET_BUTTON, BACK_BUTTON],
                    ]).resize(),
                }
            );
        } else {
            await ctx.answerCbQuery();
            await ctx.deleteMessage();
            await ctx.sendPhoto(
                {
                    source: MONEY_IMAGE_PATH,
                },
                {
                    caption,
                    ...Markup.inlineKeyboard([
                        [
                            Markup.button.callback(
                                BACK_BUTTON,
                                ENUM_ACTION_NAMES.BACK_TO_PROFILE_ACTION
                            ),
                        ],
                    ]),
                }
            );
        }
    }
    @SceneEnter()
    async enter(@Context() ctx: BotContext, @Sender('id') tgId) {
        await this.showWalletInformation(ctx, tgId);
    }

    @Hears(EXCHANGE_RATES_BUTTON)
    async exchangeRates(@Context() ctx: BotContext) {
        const rateText =
            '<strong>–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã</strong>\n 1 –ø–ª–∞—Ç–∏–Ω–æ–≤–∞—è (ü™ô) = 10 –∑–æ–ª–æ—Ç—ã—Ö (üü°)\n 1 –∑–æ–ª–æ—Ç–æ–π (üü°) = 2 —ç–ª–µ–∫—Ç—Ä—É–º–æ–≤—ã—Ö(üîµ)\n 1 —ç–ª–µ–∫—Ç—Ä—É–º–æ–≤–∞—è (üîµ) = 5 —Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã—Ö(‚ö™Ô∏è)\n 1 —Å–µ—Ä–µ–±—Ä—è–Ω–∞—è (‚ö™Ô∏è) = 10 –º–µ–¥–Ω—ã—Ö (üü§)\n\n';

        const title = '|–ú–æ–Ω–µ—Ç–∞|–ú–ú|–°–ú|–≠–ú|–ó–ú|–ü–ú\n';
        const delimeter =
            '|----------|:-------------:|------:|------:|------:|------:|';
        const copperText = `|üü§–ú–µ–¥–Ω–∞—è (–º–º)|	        1|	  1/10|	1/50|	1/100|	1/1,000|\n`;
        const silverText = `‚ö™Ô∏è–°–µ—Ä–µ–±—Ä—è–Ω–Ω–∞—è (—Å–º)	10	   1	1/5	1/10	1/100\n`;
        const electrumText = `üîµ–≠–ª–µ–∫—Ç—Ä—É–º–æ–≤–∞—è (—ç–º)	50   5	1	1/2	1/20\n`;
        const goldText = `üü°–ó–æ–ª–æ—Ç–∞—è (–∑–º)	100	    10	    2   1	1/10\n`;
        const platinumText = `ü™ô –ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è (–ø–º)	1,000	100	20	10	1\n\n`;
        let caption = rateText;
        caption += '1 ü™ô = 10 üü° = 20 üîµ = 100 ‚ö™Ô∏è = 1000 üü§';
        await ctx.sendPhoto(
            {
                source: EXCHANGE_RATES_PATH,
            },
            {
                caption: caption,
                parse_mode: 'HTML',
            }
        );
    }
    @Hears(WALLET_BUTTON)
    async wallet(@Context() ctx: BotContext, @Sender('id') tgId) {
        await this.showWalletInformation(ctx, tgId);
    }
    @Action(ENUM_ACTION_NAMES.BACK_TO_PROFILE_ACTION)
    @Hears(BACK_BUTTON)
    async profile(@Context() ctx: BotContext) {
        await ctx.deleteMessage();
        await ctx.scene.enter(ENUM_SCENES_ID.PROFILE_SCENE_ID);
    }
}
