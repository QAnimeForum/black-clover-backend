import { Action, Ctx, Hears, Scene, SceneEnter } from 'nestjs-telegraf';
import { Inject, UseFilters } from '@nestjs/common';
import { Markup } from 'telegraf';
import { TelegrafExceptionFilter } from '../filters/tg-bot.filter';
import { BotContext } from '../interfaces/bot.context';
import { ENUM_SCENES_ID } from '../constants/scenes.id.enum';
import {
    BACK_BUTTON,
    GUIDES_BUTTON,
    KNOWLEGE_BASE_BUTTON,
} from '../constants/button-names.constant';
import { WINSTON_MODULE_PROVIDER } from 'nest-winston';
import { Logger } from 'winston';
@Scene(ENUM_SCENES_ID.HELP_SCENE_ID)
@UseFilters(TelegrafExceptionFilter)
export class HelpScene {
    constructor(
        @Inject(WINSTON_MODULE_PROVIDER) private readonly logger: Logger
    ) {}
    @SceneEnter()
    async enter(@Ctx() ctx: BotContext) {
        if (ctx.chat.type == 'private') {
            const caption =
                '‚ùì –ü–æ–º–æ—â—å\n –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏–≥—Ä—ã –≤ –º–∏—Ä–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–º –Ω–∞ –º–∞–Ω–≥–µ —á—ë—Ä–Ω—ã–π –∫–ª–µ–≤–µ—Ä. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —á—Ç–æ —Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –ø–∏—à–∏ –≤ —á–∞—Ç QForum, @sanscri  –∏–ª–∏ —á–∏—Ç–∞–π üìö –ì–∞–π–¥—ã.';
            await ctx.reply(caption, {
                ...Markup.keyboard([
                    [KNOWLEGE_BASE_BUTTON, GUIDES_BUTTON],
                    [BACK_BUTTON],
                ]).resize(),
            });
        } else {
            const caption =
                '‚ùì –ü–æ–º–æ—â—å\n –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏–≥—Ä—ã –≤ –º–∏—Ä–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–º –Ω–∞ –º–∞–Ω–≥–µ —á—ë—Ä–Ω—ã–π –∫–ª–µ–≤–µ—Ä. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —á—Ç–æ —Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –ø–∏—à–∏ –≤ —á–∞—Ç QForum, @sanscri  –∏–ª–∏ —á–∏—Ç–∞–π üìö –ì–∞–π–¥—ã.';
            await ctx.reply(caption);
        }
    }

    @Hears(KNOWLEGE_BASE_BUTTON)
    async knowlegeBase(@Ctx() ctx: BotContext) {
        const buttons = [];
        buttons.push([Markup.button.callback('–ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã', 'FIND_ITEM')]);
        buttons.push([
            Markup.button.callback('–ù–∞–π—Ç–∏ —Ä–µ—Å—É—Ä—Å—ã', 'FIND_RESOURCES'),
        ]);
        buttons.push([
            Markup.button.url(
                'Share game üéÆ',
                `https://t.me/test434555_bot/?text=@test434555_bot #items`
            ),
            Markup.button.callback(
                '–ù–∞–π—Ç–∏ –µ–¥—É –∏ –Ω–∞–ø–∏—Ç–∫–∏',
                'FIND_FOOD_AND_DRINK'
            ),
        ]);
        await ctx.reply(
            '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Å—Ç—Ä–∞—Ö, —ç–∫–∏–ø–∏—Ä–æ–≤–∫–µ –∏ —Ä–µ—Å—É—Ä—Å–∞—Ö, —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ —ç—Ç–æ–º –º–∏—Ä–µ. \n–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?',
            {
                parse_mode: 'HTML',
                ...Markup.inlineKeyboard(buttons),
            }
        );
    }

    @Action('FIND_ITEM')
    async findItem(@Ctx() ctx: BotContext) {
        //  await ctx.scene.enter(ENUM_SCENES_ID.HOME_SCENE_ID);
    }
    @Hears(BACK_BUTTON)
    async home(@Ctx() ctx: BotContext) {
        await ctx.scene.enter(ENUM_SCENES_ID.HOME_SCENE_ID);
    }
}
