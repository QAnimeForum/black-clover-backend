import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';

@Entity('squad')
export class SquadEntity {
    @PrimaryGeneratedColumn('uuid')
    id: string;
    @Column('string')
    name: string;
}

type PositionEx = {
    x: number;
    y: number;
    z: number;
};

@Entity('business')
export class BusinessEntity {
    @PrimaryGeneratedColumn('uuid')
    id: string;

    owner: CharacterEntity;

    @Column({
        type: 'varchar',
    })
    name: string;
    @Column({
        type: 'int',
    })
    price: number;
    //	position: PositionEx;

    @Column({
        type: 'int',
    })
    income: number;
    @Column({
        type: 'int',
    })
    paid: number;
    @Column({
        type: 'int',
    })
    paymentTime?: Date;
}

/**
 * type Character = {
	uid: number;
	firstName: string;
	lastName: string;
	position?: PositionEx;
	money: PlayerMoney;
	playedTime: number;
	paydayTime: number;
	bonusTime: number;
	health: number;
	hunger: number;
	inventory: InventoryItem[];
	vehicleSlots: number;
	experience: number;
	appearance?: { [name: string]: any };
	licenses: { [name: string]: string };
	tasks: { [name: string]: number };
	skills: { [name: string]: number };
	dailyBonus: {
		day: number;
		pickedAt?: string;
	};
	bankAccount?: string;
	phone: {
		number?: string;
		contacts: {
			firstName: string;
			lastName: string;
			phone: string;
		}[];
		blacklist: string[];
	};
	arrest?: { time: number; reason: string };
	createdAt: string;
} & mongoose.Document;

const characterSchema = new Schema({
	uid: {
		type: Number,
		unique: true
	},
	firstName: {
		type: String,
		required: true
	},
	lastName: {
		type: String,
		required: true
	},
	health: {
		type: Number,
		default: 100
	},
	hunger: {
		type: Number,
		default: 100
	},
	bankAccount: String,
	appearance: Object,
	position: Object,
	money: {
		cash: {
			type: Number,
			default: 0
		},
		bank: {
			type: Number,
			default: 0
		}
	},
	dailyBonus: {
		day: {
			type: Number,
			default: 0
		},
		pickedAt: Date
	},
	playedTime: {
		type: Number,
		default: 0
	},
	bonusTime: {
		type: Number,
		default: 0
	},
	paydayTime: {
		type: Number,
		default: 0
	},
	experience: {
		type: Number,
		default: 0
	},
	skills: {
		type: Object,
		default: {}
	},
	tasks: {
		type: Object,
		default: {}
	},
	phone: {
		number: String,
		contacts: Array,
		blacklist: Array
	},
	inventory: {
		type: Array,
		default: []
	},
	licenses: {
		type: Object,
		default: {}
	},
	vehicleSlots: {
		type: Number,
		default: 1
	},
	arrest: {
		time: Number,
		reason: String
	},
	createdAt: {
		type: Date,
		default: Date.now
	}
});


 */

@Entity('clothes')
export class ClothesEntity {
    @PrimaryGeneratedColumn('uuid')
    id: string;

    @Column({
        type: 'varchar',
    })
    gender: string;
    @Column({
        type: 'varchar',
    })
    category: string;
    @Column({
        type: 'int',
    })
    style: number;
    @Column({
        type: 'int',
    })
    price: number;
}

/*
export class Counter {
	_id: string;
	seq: number;
};*/

@Entity('faction')
export class FactionEntity {
    @PrimaryGeneratedColumn('uuid')
    id: string;

    @Column({
        type: 'varchar',
    })
    name: string;

    @Column({
        type: 'int',
    })
    money: number;

    @Column({
        type: 'int',
    })
    materials: number;
    members: any[];
    ranks: any[];
    inventory: InventoryItem[];
}

@Entity('member')
export class MemberEntity {
    @PrimaryGeneratedColumn('uuid')
    id: string;
    user: UserEntity;
    rank: RankEntity;
}

export type Permission =
    | 'warehouse'
    | 'inventory'
    | 'garage'
    | 'workshop'
    | 'leader'
    | 'members'
    | 'wanted';

@Entity('rank')
export class RankEntity {
    @PrimaryGeneratedColumn('uuid')
    id: string;

    @Column({
        type: 'varchar',
    })
    name: string;

    @Column({
        type: 'int',
    })
    salary: number;

    @Column({
        type: 'varchar',
    })
    permissions: string[];
}

@Entity('gang_zone')
export class GangZoneEntity {
    owner: FactionEntity;
    position: PositionEx;
    capturedAt: string;
}

@Entity('house')
export class HouseEnity {
    owner?: string;
    type: string;
    position: PositionEx;
    locked: boolean;
    paid: number;
    inventory: InventoryItem[];
}

@Entity('job')
export class JobEntity {
    name: string;
    /**
 * 	checkpoints: {
		[name: string]: PositionEx[];
	};
 */
}

@Entity('money_log')
export class MoneyLogEntity {
    sender: string;
    recipient: string;
    sum: number;
    note?: string;
    createdAt: string;
}

type Promo = {
    owner?: string;
    code: string;
    income: number;
    bonus: number;
    used: string[];
} & mongoose.Document;

type Report = {
    admin?: string;
    sender: string;
    message: string;
    timestamp: string;
} & mongoose.Document;

type User = {
    email: string;
    password: string;
    socialName: string;
    serial: string;
    ip: string[];
    loginAt: string;
    registrationAt: string;
    adminLvl: number;
    donate: number;
    character: string;
    referralAward: boolean;
    ban?: {
        admin: string;
        reason: string;
        expires: string;
        permanent: boolean;
    };
} & mongoose.Document;

type Vehicle = {
    owner: string;
    oldOwners: string[];
    name: string;
    govNumber: string;
    fuel: number;
    state: {
        [key: string]: any;
    };
    tuning: {
        [key: string]: any;
    };
    inventory: InventoryItem[];
} & mongoose.Document;

const vehicleSchema = new Schema({
    owner: {
        type: Schema.Types.ObjectId,
        ref: 'Character',
    },
    oldOwners: [{ type: Schema.Types.ObjectId, ref: 'Character' }],
    name: {
        type: String,
        required: true,
    },
    govNumber: {
        type: String,
        unique: true,
        required: true,
    },
    fuel: {
        type: Number,
        required: true,
    },
    state: {
        type: Object,
        default: {},
    },
    tuning: {
        type: Object,
        default: {},
    },
    inventory: {
        type: Array,
        default: [],
    },
});

type Wanted = {
    creator: string;
    suspect: string;
    priority: number;
    reason: string;
    createdAt: string;
} & mongoose.Document;

const wantedSchema = new Schema({
    creator: {
        type: Schema.Types.ObjectId,
        required: true,
        ref: 'Character',
    },
    suspect: {
        type: Schema.Types.ObjectId,
        required: true,
        ref: 'Character',
    },
    priority: {
        type: Number,
        required: true,
    },
    reason: {
        type: String,
        required: true,
    },
    createdAt: {
        type: Date,
        default: Date.now,
    },
});
